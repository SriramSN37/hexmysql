TicketBookingSystem 

Task 1: 
Database Design:
  create database TicketBookingSystem;
  use TicketBookingSystem;

  Event table-- CREATE TABLE Event (event_id int primary key,
    event_name varchar(255),
    event_date ,
    event_time time,
    venue_id int,
    total_seats int,
    available_seats int,
    ticket_price decimal(5, 2),
    event_type enum('Movie', 'Sports', 'Concert'),
    booking_id int,
    foreign key (venue_id) references Venue(venue_id)
);

  Customer table-- create table Customer (
    customer_id int primary key,
    customer_name varchar(255),
    email varchar(255),
    phone_number varchar(20),
    booking_id int
);

  Boooking table-- create table Booking (
    booking_id int primary key,
    customer_id int,
    event_id int,
    num_tickets int,
    total_cost decimal(5, 2),
    booking_date date,
    foreign key (customer_id) references Customer(customer_id),
    foreign key (event_id) references Event(event_id)
);

  alter table Event add constraint fk_event foreign key(booking_id) references booking(booking_id);



Tasks 2:

1. Venue table
INSERT INTO Venue (venue_id, venue_name, address) VALUES
(1, 'Stadium', '123 Stadium Ave'),
(2, 'Concert Hall', '456 Music St'),
(3, 'Cinema', '789 Movie St'),
(4, 'Arena', '10 Sports Rd'),
(5, 'Amphitheater', '1 Park Lane'),
(6, 'Convention Center', '555 Conference Ave'),
(7, 'Auditorium', '700 Performance St'),
(8, 'Field', '888 Sport Ave'),
(9, 'Theatre', '999 Drama St'),
(10, 'Club', '100 Nightlife Rd');

Event Table
insert into Event (event_id, event_name, event_date, event_time, venue_id, total_seats, available_seats, ticket_price, event_type, booking_id) VALUES
(11, 'Movie Night', '2024-05-01', '18:00:00', 3, 100, 10, 150.00, 'Movie', 1111),
(22, 'Basketball Game', '2024-05-02', '19:30:00', 1, 5000, 2500, 20.00, 'Sports', 2222),
(33, 'Concert', '2024-05-03', '20:00:00', 2, 2000, 250, 30.00, 'Concert', 3333),
(44, 'Football Match', '2024-05-04', '15:00:00', 4, 15000, 850, 25.00, 'Sports', 4444),
(55, 'Outdoor Play', '2024-05-05', '16:00:00', 5, 500, 500, 15.00, 'Concert', 5555),
(66, 'Movie Night', '2024-05-01', '18:00:00', 3, 100, 100, 10.00, 'Movie', 6666),
(77, 'World cup ', '2024-05-07', '20:30:00', 1, 15000, 800, 20.00, 'Sports', 7777),
(88, 'Soccer Match', '2024-05-08', '14:00:00', 8, 20000, 20000, 30.00, 'Sports', 8888),
(99, 'Musical', '2024-05-09', '19:00:00', 9, 1500, 1500, 40.00, 'Concert', 9999),
(101, 'Concert', '2024-05-03', '20:00:00', 2, 2000, 2000, 30.00, 'Concert', 1010);

Customer Table
INSERT INTO Customer (customer_id, customer_name, email, phone_number, booking_id) VALUES
(111, 'Alice', 'alice@example.com', '123-456-7890', 1111),
(222, 'Bob', 'bob@example.com', '111-111-1189', 2222),
(333, 'Charlie', 'charlie@example.com', '990-555-5555', 3333),
(444, 'David', 'david@example.com', '987-765-4322', 4444),
(555, 'Eva', 'eva@example.com', '913-476-8569', 5555),
(666, 'Frank', 'frank@example.com', '121-212-1212', 6666),
(777, 'Grace', 'grace@example.com', '111-110-0000', 7777),
(888, 'Henry', 'henry@example.com', '112-222-2222', 8888),
(999, 'Isabel', 'isabel@example.com', '124-444-4444', 9999),
(110, 'Jack', 'jack@example.com', '111-666-6666', 1010);

Booking Table
INSERT INTO Booking (booking_id, customer_id, event_id, num_tickets, total_cost, booking_date) VALUES
(1111, 111, 11, 2, 20.00, '2024-04-27'),
(2222, 222, 22, 4, 80.00, '2024-04-28'),
(3333, 333, 33, 1, 30.00, '2024-04-29'),
(4444, 444, 44, 3, 75.00, '2024-04-30'),
(5555, 555, 55, 2, 30.00, '2024-05-01'),
(6666, 666, 66, 1, 50.00, '2024-05-02'),
(7777, 777, 77, 2, 40.00, '2024-05-03'),
(8888, 888, 88, 5, 150.00, '2024-05-04'),
(9999, 999, 99, 2, 80.00, '2024-05-05'),
(1010, 110, 101, 3, 75.00, '2024-05-06');

alter table Event add constraint fk_event foreign key(booking_id) references booking(booking_id);
alter table Customer add constraint fk_customer foreign key(booking_id) references booking(booking_id);

2. Select * from event;

3. select * from event where available_seats>0;

4. select * from event where event_name like "%cup%";

5. select * from event where ticket_price between 1000 and 2500;

6. select * from event where event_date between '2024-05-03' and '2024-05-08' order by event_date; 

7. select * from event where available_seats>0 and event_name like"%Concert%";

8. select * from customer where LIMIT 5 OFFSET 5;

9. select*from booking where num_tickets>4; 

10. select*from customer where phone_number like "%000";

11. select*from event where total_seats >15000 order by total_seats;

12. select* from event where event_name not like'x%'and event_name not like'y%'and event_name not like'z%';


Task 3: 

1. select event_name, avg(ticket_price) from event group by event_name;

2. select event_name, sum(total_cost) from booking join event on booking.event_id= event.event_id group by event_name;

3. select event_name, sum(num_tickets) from booking, event where booking.event_id = event.event_id group by event_name order by sum(num_tickets) desc limit 1;

4. select event_name, sum(num_tickets) from booking join event on Booking.event_id = event.event_id group by event_name;

5. select event_name from event e left join booking b on e.event_id = b.event_id where num_tickets is null;

6. select c.customer_id, c.customer_name,  max(b.num_tickets) from customer c left join booking b on c.customer_id = b.customer_id group by c.customer_id, c.customer_name order by max(b.num_tickets) desc limit 1;

7. select e.event_id, e.event_name, sum(b.num_tickets), month(b.booking_date) from event e left join booking b on e.event_id =b.event_id group by e.event_id,month(b.booking_date) order by month(b.booking_date);

8. select v.venue_id, v.venue_name, avg(e.ticket_price) from venue v left join event e on v.venue_id = e.event_id group by v.venue_id, v.venue_name;

9. select event_type, count(event_type), sum(num_tickets) from event left join booking on event.event_id = booking.event_id group by event_type;

10.select year(booking_date), sum(total_cost) from booking group by year(booking_date);

11. select c.customer_id, c.customer_name, COUNT(b.event_id) as num_total_events from customer c join booking b on c.customer_id=b.customer_id group by customer_id, customer_name having count(b.event_id) >1;

12. select c.customer_id, c.customer_name, sum(b.total_cost) from customer c left join booking b on c.customer_id=b.customer_id group by c.customer_id, c.customer_name;

13. select v.venue_name, e.event_type,avg(e.ticket_price) from venue v join event e on e.venue_id=v.venue_id group by e.event_type, v.venue_name;

14. select c.customer_name, count(b.booking_id) from customer c left join booking b on c.customer_id=b.customer_id group by c.customer_name;


Tasks 4: Subquery and its types

1. select v.venue_name,(select avg(ticket_price) from event where venue_id = v.venue_id) from venue v;

2. select event_name, (total_seats - available_seats) from event where (select(total_seats - available_seats) from event e where e.event_id=event.event_id)>0.5*total_seats;

3. select event_name,(select sum(total_seats - available_seats) from event e where e.event_id = event.event_id) as total_tickets_sold from event;

4. select c.customer_name from customer c where not exists (select booking_id from booking where customer_id = c.customer_id);

5. select  event_id, event_name from event where (total_seats - available_seats) not in (select (total_seats - available_seats) from event where (total_seats - available_seats) <>0);

6. select e.event_type, sum(tickets_sold) as tickets_sold from(select event_id, sum(num_tickets) as tickets_sold from booking group by event_id) b join event e on b.event_id = e.event_id group by e.event_type;

7. select event_name, ticket_price from event where ticket_price > (select avg(ticket_price) from event);

8. select c.customer_id, c.customer_name, (select SUM(b.total_cost) from Booking b where b.customer_id = c.customer_id) as total_revenue from customer c;

9. select customer_id, customer_name from customer where exists (select 1 from booking join event on booking.event_id = event.event_id where venue_id = 3 and booking.customer_id = customer.customer_id);

10. select e.event_type, sum(tickets_sold) as tickets_sold from(select event_id, sum(num_tickets) as tickets_sold from booking group by event_id) b join event e on b.event_id = e.event_id group by e.event_type;

11. select customer_name, month(booking_date) from customer c join booking b on b.customer_id=c.customer_id where month(booking_date) = (select month(booking_date) from booking b limit 1);

12. select v.venue_name,(select avg(ticket_price) from event where venue_id = v.venue_id) from venue v;

Control structure
Task 1: Conditional Statements

import java.util.Scanner;
public class BookingSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of available tickets: ");
        int availableTickets = scanner.nextInt();
        System.out.print("Enter the number of tickets to book: ");
        int noOfBookingTicket = scanner.nextInt();
        if (availableTickets >= noOfBookingTicket) {
            int remainingTickets = availableTickets - noOfBookingTicket;
            System.out.println("Tickets booked successfully!");
            System.out.println("Remaining tickets: " + remainingTickets);
        } else {
            System.out.println("Tickets unavailable. Available tickets: " + availableTickets);
        }

    }
}

Task 2: Nested Conditional Statements

import java.util.Scanner;
public class TicketBookingSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ticket Options:");
        System.out.println("1. Silver");
        System.out.println("2. Gold");
        System.out.println("3. Diamond");
        System.out.print("Enter the ticket type (1 for Silver, 2 for Gold, 3 for Diamond): ");
        int ticketType = scanner.nextInt();
        System.out.print("Enter the number of tickets needed: ");
        int noOfTickets = scanner.nextInt();

        double basePrice = 0;
        switch (ticketType) {
            case 1:
                basePrice = 10.0;
                break;
            case 2:
                basePrice = 50.0;
                break;
            case 3:
                basePrice = 80.0; 
                break;
            default:
                System.out.println("Invalid ticket type!");
                System.exit(1);
        }
        double totalCost = basePrice * noOfTickets;
        System.out.println("Total cost of " + noOfTickets + " " + " tickets: Rs." + totalCost);
    }

Task 3: Looping

import java.util.Scanner;
public class TicketBookingSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input;
        do {
            System.out.println("Ticket Options:");
            System.out.println("1. Silver");
            System.out.println("2. Gold");
            System.out.println("3. Diamond");
            System.out.print("Enter the ticket type (1 for Silver, 2 for Gold, 3 for Diamond), or type 'Exit' to quit: ");
            input = scanner.nextLine();
            if (input.equalsIgnoreCase("Exit")) {
                break;
            }
            int ticketType;
            ticketType = Integer.parseInt(input);
            System.out.print("Enter the number of tickets needed: ");
            int noOfTickets = scanner.nextInt();
            scanner.nextLine(); 
            double basePrice = 0;
            switch (ticketType) {
                case 1:
                    basePrice = 20.0; 
                    break;
                case 2:
                    basePrice = 50.0; 
                    break;
                case 3:
                    basePrice = 80.0; 
                    break;
            }
            double totalCost = basePrice * noOfTickets;
            System.out.println("Total cost of " + noOfTickets + " " + " tickets: Rs." + totalCost);
        } while (!input.equalsIgnoreCase("Exit"));

    }

Task 4: Class & Object
//EVENT class
public class Event {
	String event_name;
	String event_date; 
	String event_time;
	String venue_name; 
	int total_seats;
	int available_seats; 
	double ticket_price; 
	String event_type;
	
	
	Event(){
		event_name="Movie Night";
		event_date="2024-05-01"; 
		event_time="18:00";
		venue_name="Cinema"; 
		total_seats=100;
		available_seats=10; 
		ticket_price=10.0; 
		event_type="Movie";
		
	}
	
	public Event(String event_name,String event_date,String event_time,String venue_name,int total_seats,int available_seats,double ticket_price,String event_type){
		this.event_name=event_name;
		this.event_date=event_date; 
		this.event_time=event_time;
		this.venue_name=venue_name; 
		this.total_seats=total_seats;
		this.available_seats=available_seats; 
		this.ticket_price=ticket_price; 
		this.event_type=event_type;
	}
		
	public String getEvent_name() {
		return event_name;
	}

	public void setEvent_name(String event_name) {
		this.event_name = event_name;
	}

	public String getEvent_date() {
		return event_date;
	}

	public void setEvent_date(String event_date) {
		this.event_date = event_date;
	}

	public String getEvent_time() {
		return event_time;
	}

	public void setEvent_time(String event_time) {
		this.event_time = event_time;
	}

	public String getVenue_name() {
		return venue_name;
	}

	public void setVenue_name(String venue_name) {
		this.venue_name = venue_name;
	}

	public int getTotal_seats() {
		return total_seats;
	}

	public void setTotal_seats(int total_seats) {
		this.total_seats = total_seats;
	}

	public int getAvailable_seats() {
		return available_seats;
	}

	public void setAvailable_seats(int available_seats) {
		this.available_seats = available_seats;
	}

	public double getTicket_price() {
		return ticket_price;
	}

	public void setTicket_price(double ticket_price) {
		this.ticket_price = ticket_price;
	}

	public String getEvent_type() {
		return event_type;
	}

	public void setEvent_type(String event_type) {
		this.event_type = event_type;
	}
	
	
	public double calculate_total_revenue(){
        return ticket_price * (total_seats - available_seats);
    }
	
	public int getBookedNoOfTickets() {
        return total_seats - available_seats;
    }
	
	
	public void book_tickets(int num_tickets){
	
		if (num_tickets <= available_seats) {
            available_seats -= num_tickets;
            System.out.println(num_tickets + " tickets booked successfully.");
        } 
		else {
            System.out.println("Not enough available seats to book " + num_tickets + " tickets.");
        }
	}
	
	public void cancel_booking(int num_tickets) {
        available_seats += num_tickets;                                            
        System.out.println(num_tickets + " tickets canceled successfully.");
			
        }
	
	public void display_event_details() {
		System.out.println("Event Name: " + event_name);
        System.out.println("Event Date: " + event_date);
        System.out.println("Event Time: " + event_time);
        System.out.println("Venue Name: " + venue_name);
        System.out.println("Total Seats: " + total_seats);
        System.out.println("Available Seats: " + available_seats);
        System.out.println("Ticket Price: $" + ticket_price);
        System.out.println("Event Type: " + event_type);
	}
	
}

//Venue class
public class Venue {
	String venue_name;
	String address;
	Venue(){
		
	}
	Venue(String venue_name, String address){
		this.venue_name=venue_name;
		this.address=address;
	}
	public String getVenue_name() {
		return venue_name;
	}
	public void setVenue_name(String venue_name) {
		this.venue_name = venue_name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public void display_venue_details() {
		System.out.println("Venue name: "+venue_name+"Address: "+address);
	}
}

//Customer class
public class Customer {
	String customer_name;
    String email;
    String phone_number;
    Customer(){
    	
    }
    Customer(String customer_name, String email, String phone_number){
    	this.customer_name=customer_name;
    	this.email=email;
    	this.phone_number=phone_number;
    	
    }
	public String getCustomer_name() {
		return customer_name;
	}
	public void setCustomer_name(String customer_name) {
		this.customer_name = customer_name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPhone_number() {
		return phone_number;
	}
	public void setPhone_number(String phone_number) {
		this.phone_number = phone_number;
	}
    public void display_customer_details() {
    	System.out.println("Customer name: "+customer_name+"email: "+email+"phone_number: "+phone_number);
    }
}

//Booking class
import java.util.*;
public class Booking {
int booking_id;
	
	public Booking() {
		int booking_id=101;
    }
	
	public Booking(int booking_id) {
		this.booking_id=booking_id;
	}
    public static void main(String[] args) {
        Event e = new Event();
        Booking b=new Booking();
        e.book_tickets(11);
        b.cancelBooking(100,8);
        e.display_event_details();
        int available_tickets = getAvailableNoOfTickets();
        System.out.println("Available Tickets: " + available_tickets);
        
        calculate_booking_cost(10);
    }
    
    public void cancelBooking(int bookingId,int num_tickets) {
    	Event e=new Event();
        if (this.booking_id == bookingId) {
            e.setAvailable_seats(e.getAvailable_seats() + num_tickets);
            System.out.println(num_tickets + " tickets cancelled successfully.");
        } else {
            System.out.println("Invalid booking ID. Unable to cancel tickets.");
        }
    }
    public static int getAvailableNoOfTickets() {
        Event e = new Event();
        return e.getAvailable_seats();
    }

    public static void calculate_booking_cost(int num_tickets) {
        Event e = new Event();
        double ticket_price = e.getTicket_price();
        double total_cost = ticket_price * num_tickets;
        System.out.println("Total Cost for " + num_tickets + " tickets: " + total_cost);
    }
}

Task 5: Inheritance and polymorphism

1.Movie class
public class Movie extends Event {
	String genre;
	String ActorName;
	String ActressName; 

	Movie(String event_name, String event_date, String event_time, String venue_name, int total_seats,int available_seats, double ticket_price, String event_type,String genre, String ActorName, String ActressName){
		super(event_name,event_date,event_time,venue_name,total_seats,available_seats,ticket_price,event_type);
		this.genre=genre;
		this.ActorName=ActorName;
		this.ActressName=ActressName;

	}

	public String getGenre() {
		return genre;
	}

	public void setGenre(String genre) {
		this.genre = genre;
	}

	public String getActorName() {
		return ActorName;
	}

	public void setActorName(String actorName) {
		ActorName = actorName;
	}

	public String getActressName() {
		return ActressName;
	}

	public void setActressName(String actressName) {
		ActressName = actressName;
	}
	public String toString() {
		return super.toString()+ "Movie [genre=" + genre + ", ActorName=" + ActorName + ", ActressName=" + ActressName + "]";
	}
	
	public void display_event_details() {
		super.display_event_details();
		System.out.println( "Movie [genre=" + genre + ", ActorName=" + ActorName + ", ActressName=" + ActressName + "]");
	}
}

2.Concert class
public class Concert extends Event {
	
	String artist; 
	String type;
	Concert(String event_name, String event_date, String event_time, String venue_name, int total_seats,int available_seats, double ticket_price, String event_type,String artist, String type){
		
		super(event_name,event_date,event_time,venue_name,total_seats,available_seats,ticket_price,event_type);
		this.artist=artist;
		this.type=type;

	}

	public String getArtist() {
		return artist;
	}

	public void setArtist(String artist) {
		this.artist = artist;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}
	public String toString() {
		return super.toString()+"Concert [artist=" + artist + ", type=" + type + "]";
	}

	public void  display_concert_details(){
		super.display_concert_details();
		System.out.println("Concert [artist=" + artist + ", type=" + type + "]");
	}
}

3.Sports class
public class Sports extends Event {
	
	String sportName; 
	String teamsName;
	Sports(	String event_name, String event_date, String event_time, String venue_name, int total_seats,int available_seats,double ticket_price,String event_type,String sportName,String teamsName){
		super(event_name,event_date,event_time,venue_name,total_seats,available_seats,ticket_price,event_type);
		this.sportName=sportName;
		this.teamsName=teamsName;
	}
	public String getSportName() {
		return sportName;
	}
	public void setSportName(String sportName) {
		this.sportName = sportName;
	}
	public String getTeamsName() {
		return teamsName;
	}
	public void setTeamsName(String teamsName) {
		this.teamsName = teamsName;
	}
	public String toString() {
		return super.toString()+"Sports [sportName=" + sportName + ", teamsName=" + teamsName + "]";
	}
	
	public void display_sport_details() {
		super.display_sport_details();
		System.out.println("Sports [sportName=" + sportName + ", teamsName=" + teamsName + "]");
	}
}

4.

Task 6: Abstraction
// same classes from task 5 with abstraction classes


Task 9:Exceptions

// EventNotFoundException
class EventNotFoundException extends Exception {
    public EventNotFoundException(String message) {
        super(message);
    }
}

// InvalidBookingIDException
class InvalidBookingIDException extends Exception {
    public InvalidBookingIDException(String message) {
        super(message);
    }
}
